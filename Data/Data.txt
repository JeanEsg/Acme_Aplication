

--- Documento: Configuracion de Red.pdf ---
Configuración de red. 
Jean Alfred Gargano Alomia 
Objetivo 
 
Tras completar este laboratorio, estará en capacidad de: 
 
- Crear dispositivos de red virtuales 
- Gestionar dispositivos de red y configuraciones en un sistema Linux utilizando la 
herramienta iproute2 (ip) 
- Gestionar dispositivos de red y configuraciones en un sistema Linux utilizando la 
herramienta NetworkManager (nmcli) 
- Solucionar problemas comunes de red 
 
Ejercicio 1 
Lo primero que necesitamos realizar antes de continuar con este laboratorio, es la 
creación de una interfaz de red virtual especial que se conoce como dispositivo 
MACVTAP.  
Estos dispositivos son dispositivos virtuales que combinan las propiedades de una 
interfaz de software (conocida como dispositivo TAP), Junto con las propiedades de un 
dispositivo de Red virtual llamado MACVLAN. 
Configurar y trabajar con estos dispositivos te permitirá probar cambiar y configurar de 
forma segura varias configuraciones de redes. Utilizaremos esta interfaz en varios 
ejercicios para no afectar la configuración de red existente en el sistema. 
 
1. Abra la terminal de su máquina linux, como un usuario normal  (para este 
laboratorio puede usar tanto la distribución presente en los dispositivos de la 
universidad, como su propia máquina virtual). 
2. Utilice el comando ip para listar todas las interfaces de red del sistema, para 
esto escriba ip link show , adjunte captura de pantalla del resultado obtenido. 
3. 
Intente usar el comando nmcli para listar los dispositivos de red. 
a. Verifique si la aplicación está instalada, para eso use el comando nmcli -
-version. Si la aplicación está instalada aparecerá la versión en caso que  
no, aparecerá un mensaje como el mostrado en la figura. 

 
 
b. en caso de que la aplicación no esté instalada, realice la instalación, 
dependiendo de la distribución de linux que use: 
- 
para distribuciones basadas en debian (como Ubuntu, linux mint, 
Kali linux): sudo apt install -y network-manager 
- 
Para distribuciones basadas en redhat (Rocky, Alma linux, Centos, 
Oracle , Fedora) sudo yum install -y NetworkManager 
c. Liste todos los dispositivos de red mediante el comando nmcli -f 
DEVICE device, adjunte captura de pantalla del resultado obtenido. 
 
4. Liste los dispositivos de red, listando todos los elementos dentro del directorio 
/sys/class/net/  adjunte captura de pantalla del comando utilizado y del 
resultado obtenido. 
 
5. De acuerdo a lo visto en este taller y a sus consultas adicionales entregue sus 
conclusiones entre usar los comandos ip, nmcli y ls para obtener el nombre 
de los dispositivos de red.  
El comando Ip muestra las interfaces de red conectadas al computador El 
Segundo comando usado brinda información detallada sobre las interfaces de 

red y sus direcciones con ipv6 y mascaras, mientras que usar ls, solo lista el 
nombre de la interfaces 
 
6. Consulte cuál es el propósito de los comandos “grep”, “tail”  y “awk”, a partir de 
su respuesta describa qué ocurre al ejecutar el comando  ls -l /sys/class/net/ | 
grep -v 'virtual\|total' | tail -n 1 | awk '{print $9}', no es necesario adjuntar 
captura de pantalla de este comando pero si es necesario que escriba la 
descripción de su funcionamiento. 
Grep funciona para buscar palabras en archivos mientras que tail muestra las 
ultimas lineas de un archivo 
7. Ahora se le asignará a una variable (llamada $MyDevice) el resultado de la 
operación anterior, para esto se debe ejecutar el comando:  MyDevice=$(ls -l 
/sys/class/net/ | grep -v 'virtual\|total' | tail -n 1 | awk '{print 
$9}')  y visualice el contenido de la variable usando el comando echo 
$MyDevice. Adjunte captura de pantalla del resultado de dicho comando. 
 
8.  Ahora, cree una interfaz MACVTAP llamada virt_if0. La nueva interfaz se asociará 
con $MyDevice. para esto digite el comando sudo  ip link add link 
$MyDevice name virt_if0 type macvtap mode bridge 
9. Use alguno de los comandos vistos anteriormente para listar las interfaces de 
red y verifique que la interfaz virtual fue creada satisfactoriamente, adjunte una 
captura de pantalla del comando usado y del resultado obtenido. 
10. 
 
Observe algunas características de la interfaz creada mediante el comando ip -
-brief link show virt_if0. adjunte una captura de pantalla del resultado 
obtenido. 
11. 
 
Para ver información más detallada de la interfaz de red creada utilice el 
comando ip --detail link show type macvtap. adjunte una captura de 
pantalla del resultado obtenido. 
 
Marque y entregue esta guía EXPORTADA EN PDF. 
 


--- Documento: LabProcesos-JeanAlfredGargano.pdf ---
Universidad Autónoma de Occidente 
Facultad de ingeniería. 
Laboratorio 2. Gestión de procesos. 
 
Objetivo general. 
Comprender la forma en que el sistema operativo gestiona procesos y servicios. 
 
Parte 1. 
Gestión de procesos en el sistema. 
El comando systemctl es la herramienta central de gestión para el control del sistema. En esta 
guía se explicará como administrar servicios, comprobar estados, cambiar estados del sistema y 
trabajar con los archivos de configuración. 
1. Inicie su sistema operativo Ubuntu (u Oracle Linux), en caso de ser necesario pida 
asistencia al monitor de sala para iniciar sesión. 
2. Inicie un terminal de línea de comandos. 
3. Ejecute el comando “systemctl” (sin las comillas), dicho comando le permite observar 
todas las unidades (procesos) que se están ejecutando. Adjunte una captura de pantalla de 
los resultados del comando. (es posible que la lista sea muy larga, recuerde que puede 
usar la barra espaciadora para avanzar página por página en la salida, utilice la tecla ‘Q’ 
para salir) 
 
4. Ahora utilice el comando “systemctl status crond”, este comando permite 
verificar el estado del servicio “crond”.  Adjunte captura de pantalla del resultado 
obtenido. 

 
5. Ejecute el comando “systemctl --state= inactive”, describa que ocurre al 
ejecutar el comando y adjunte captura de pantalla del resultado obtenido 
 
Con este comando se ha cambiado el estado de los procesos 
6. Ejecute el comando “systemctl --type= service”, describa que ocurre al 
ejecutar el comando y adjunte captura de pantalla del resultado obtenido 
 
Con este comando se acaban de volver los procesos a su estado de inicio 
7. A partir de lo anterior escriba un comando que les permita listar los servicios inactivos. 
Adjunte captura de pantalla del resultado obtenido. 

 
8. Cree un archivo llamado “servifalso.service” en la carpeta 
“etc/systemd/system”. Adjunte una captura de pantalla con los comandos usados 
para la creación del archivo y muestre la evidencia que el archivo ha sido creado . 
 
9. Ejecute el comando “vi etc/systemd/system/servifalso.service” para 
editar el contenido del archivo, el cuál debería quedar de la siguiente forma 
 
 
10. Verifique el estado del servicio creado (recuerde que el nombre usado para la creación fue 
servifalso). Adjunte captura de pantalla de los resultados obtenidos. 
 
11. Inicie y detenga el servicio creado, asegúrese de verificar el estado del servicio antes y 
después. Adjunte una captura de pantalla . 
[Unit] 
Description=Servicio muy falso 
After=network.target 
[Service] 
ExecStart=/bin/echo He iniciado un servicio falso 
ExecStop=/bin/echo he detenido el servicio falso 
[Install] 
WantedBy=multi-user.target 
 

 
 
 
Parte 2. 
Monitoreo de procesos. 
En esta sesión se usarán varios comandos para monitorear los estados de una aplicación y 
gestionar su estado. Para realizar este laboratorio se recomienda utilizar dos ventanas del terminal, 
uno al lado izquierdo de la pantalla y otra al lado derecho. Por lo tanto se denominarán “ventana 
derecha” y “ventana izquierda”. 
1. En la ventana derecha cree un archivo de Python llamado “carga.py” en su carpeta de 
usuario.  Adjunte captura de pantalla que evidencie el proceso. 
 
 
 
 
 
 
 
 

2. Modifique el archivo carga.py de la siguiente forma 
 
3. Ejecute en la ventana derecha el comando “python3 carga.py” tenga en cuenta que 
el programa ejecuta un bucle infinito, así que si por algún motivo desea detenerlo puede 
presionar la combinación ctrl + c; pero para efectos del laboratorio permita que la 
aplicación se ejecute. 
4. Ahora en la ventana izquierda ejecute el comando “ps” este comando le muestra los 
procesos que se ejecutan en esta terminal. Valide si el proceso de Python está en la lista. 
Adjunte captura de pantalla del resultado obtenido. 
 
Nota: Me toco usar el modificador -u debido a que debido a que ps solo muestra los 
procesos asociados a una terminal, en cambio con -u muestro todos los procesos que corre 
el usuario 
5. En la ventana izquierda ahora ejecute el comando “ps -r” esto muestra los procesos que 
se están ejecutando en el momento, Valide si el proceso de Python está en la lista. Adjunte 
captura de pantalla del resultado obtenido. 
 
6. En la ventana izquierda ahora ejecute el comando “ps -o pid,pri,ni,cmd” esto 
muestra los procesos que se ejecutan en esta terminal, con su ID de proceso (pid), su 
prioridad (pri) su nivel nice (ni) y el comando que se ejecuta(cmd). Consulte cómo la 
prioridad y el nivel de nice definen la forma de ejecutar un proceso en Linux. Adjunte 
captura de pantalla del resultado obtenido. 
print('welcome') 
it = 1 
while True: 
        i=0 
        while i<50_000: 
                i+=1; 
                
print('|',end='') 
        print(f'\n === 
iteration {it} ===') 
        it +=1 

 
7. Cree una nueva instancia de bash  en la ventana izquierda usando el comando “nice -n 
10 bash”, después de esto ejecute de nuevo el comando “ps -o pid,pri,ni,cmd” 
y determine las diferencias con la salida del comando anterior. 
R// La diferencia se marca en que la segunda instancia de bash tiene menor prioridad que 
la primera 
8. En la ventana izquierda ejecute el comando “pkill pyhton3” esto deberá detener la 
ejecución del programa de Python. Adjunte captura de pantalla para evidenciarlo. 
 
9. EN la ventana derecha, modifique su archivo carga.py para que muestre lo siguiente. 
 
10. Ejecute en la ventana derecha el comando “python3 carga.py &” esto inicia la 
ejecución del programa pero en segundo plano. Consulte cuál es la diferencia entre 
ejecutar un proceso en primer plano y ejecutarlo en segundo plano. 
R// Los programas ejecutados en primer plano, los usuario los pueden ver, en segundo 
plano no 
11. Valide si el programa de Python se está ejecutando y adjunte captura de pantalla para 
mostrarlo. 
 
12. Tome nota del PID del proceso. 
4190 
13. En la ventana derecha digite el comando “bg” este muestra las acciones que están en 
segundo plano, valide si la aplicación de Python se está ejecutando en segundo plano, 
adjunte captura de pantalla para evidenciar su hallazgo. 
print('welcome, espera 30 segundos y podrás escribir en consola') 
it = 1 
while True: 
        i=0 
        while i<50_000: 
                i+=1 
        it +=1 

 
14. En la ventana izquierda digite el comando “kill -n 9 <id_del proceso_python3>”, valide si 
eso detiene al proceso en la ventana derecha (quizás requiera dar un enter en la ventana 
derecha para visualizar el mensaje).  Adjunte una captura de pantalla para evidenciar su 
trabajo 
 
 
 
 
 
 
 
 
